import asyncio
import schedule
from datetime import datetime, timedelta

from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.database.db import get_reminders_to_send, get_event_by_id, delete_reminder
from src.database.db import get_past_events, get_non_attended_registrations
from src.database.db import logger

async def check_reminders():
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç bot –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from src.bot import bot
    try:
        current_date = datetime.now().strftime('%Y-%m-%d')
        reminders = get_reminders_to_send(current_date)
        for reminder in reminders:
            user_id = reminder[1]
            event_id = reminder[2]
            event = get_event_by_id(event_id)
            if event:
                await bot.send_message(user_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {event[0]} {event[1]} –≤ {event[2]} —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è! ‚è∞")
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {event_id}")
            delete_reminder(reminder[0])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

async def check_non_attendance():
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç bot –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from src.bot import bot
    try:
        today = datetime.now().strftime('%Y-%m-%d')
        past_events = get_past_events(today)
        for event in past_events:
            event_id = event[0]
            non_attended = get_non_attended_registrations(event_id)
            for reg in non_attended:
                reg_id = reg[0]
                user_id = reg[1]
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text="–ú–µ–¥–æ—Ç–≤–æ–¥ ‚öïÔ∏è", callback_data=f"reason_med_{reg_id}")
                keyboard.button(text="–õ–∏—á–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã üë§", callback_data=f"reason_personal_{reg_id}")
                keyboard.button(text="–ù–µ –∑–∞—Ö–æ—Ç–µ–ª üòî", callback_data=f"reason_no_{reg_id}")
                await bot.send_message(user_id, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –Ω–æ –Ω–µ –ø—Ä–∏—à–ª–∏. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É: ‚ùì", reply_markup=keyboard.as_markup())
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø—Ä–æ—Å –Ω–µ—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è reg {reg_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ—è–≤–æ–∫: {e}")

async def schedule_checker():
    while True:
        schedule.run_pending()
        await asyncio.sleep(1)

async def start_scheduler():
    schedule.every(10).minutes.do(lambda: asyncio.create_task(check_reminders()))
    schedule.every().day.at("00:00").do(lambda: asyncio.create_task(check_non_attendance()))
    await schedule_checker()