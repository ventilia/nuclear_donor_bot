import re
from datetime import datetime, timedelta
from aiogram import types, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardMarkup, KeyboardButton

from src.states.states import ProfilRegStates, ConsentStates, CancelReasonState, AskQuestionState
from src.database.db import get_user_by_telegram_id, get_profile_status_by_telegram_id, get_active_events
from src.database.db import get_donations_count_by_center, get_last_donation, get_donations_history, \
    get_user_registrations, get_user_registrations_count
from src.database.db import get_user_id_by_telegram_id, get_event_capacity, \
    get_registrations_count as get_event_reg_count
from src.database.db import get_event_date, add_registration, add_reminder, cancel_registration
from src.database.db import add_non_attendance_reason, save_or_update_user, get_user_by_phone, get_consent_by_phone
from src.database.db import update_consent_by_phone, add_question, logger, get_user_by_fio, get_connection

user_router = Router()


@user_router.message(Command(commands=['start']))
async def start_handler(message: types.Message, state: FSMContext):
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç bot –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from src.bot import bot
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")
    try:
        await bot.send_photo(message.chat.id, types.FSInputFile('frame 3.jpg'),
                             caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –î–Ω—è –î–æ–Ω–æ—Ä–∞ –ú–ò–§–ò! üíâ‚ù§Ô∏è")
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª 'frame 3.jpg' –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–∞–Ω–Ω–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –î–Ω—è –î–æ–Ω–æ—Ä–∞ –ú–ò–§–ò! üíâ‚ù§Ô∏è")
    try:
        await bot.send_document(message.chat.id, types.FSInputFile('privacy_policy.pdf'),
                                caption="–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º (–ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏). üìÑ")
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª 'privacy_policy.pdf' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await message.answer("–§–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. ‚ö†Ô∏è")
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")
        return
    await state.set_state(ConsentStates.consent)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–°–æ–≥–ª–∞—Å–µ–Ω ‚úÖ", callback_data="consent_yes")
    keyboard.button(text="–ù–µ—Ç ‚ùå", callback_data="consent_no")
    await message.answer(
        "–Ø –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –∏ –æ–±—è–∑—É—é—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ /info –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –Ω–∞ –ª—é–±–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ. üìÑ",
        reply_markup=keyboard.as_markup())


@user_router.callback_query(lambda c: c.data in ['consent_yes', 'consent_no'], ConsentStates.consent)
async def process_initial_consent(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'consent_yes':
        await state.update_data(initial_consent=True)
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ (–ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É), –æ–±–Ω–æ–≤–ª—è–µ–º consent
        data = await state.get_data()
        phone = data.get('phone')
        if phone:
            try:
                update_consent_by_phone(phone, 1)
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–≥–ª–∞—Å–∏–µ (consent=1) –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone} –≤ process_initial_consent")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏—è –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone}: {e}")
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû", request_contact=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await callback_query.message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. üîë",
                                            reply_markup=keyboard)
        await state.set_state(ProfilRegStates.phone_confirm)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –ø—Ä–∏–Ω—è–ª —Å–æ–≥–ª–∞—Å–∏–µ (–æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å PDF –∏ /info)")
    else:
        await callback_query.message.answer("–ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è. üëã")
        await state.clear()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Å–æ–≥–ª–∞—Å–∏—è")
    await callback_query.answer()


@user_router.message(ProfilRegStates.phone_confirm)
async def process_phone(message: types.Message, state: FSMContext):
    if not message.contact:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞. ‚ö†Ô∏è")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç")
        return
    phone = message.contact.phone_number
    try:
        user = get_user_by_phone(phone)
        await state.update_data(phone=phone)
        if user:
            await state.update_data(fio=user[3], category=user[4], group=user[5], social_contacts=user[6])
            response = f"–í—ã —É–∂–µ –≤ –±–∞–∑–µ: {user[3]}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {user[4]}, –≥—Ä—É–ø–ø–∞: {user[5] or '–ù–µ—Ç'}. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ? (–î–∞/–ù–µ—Ç) ‚úÖ/‚ùå"
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–î–∞ ‚úÖ", callback_data="confirm_yes")
            keyboard.button(text="–ù–µ—Ç ‚ùå", callback_data="confirm_no")
            await message.answer(response, reply_markup=keyboard.as_markup())
            logger.info(f"–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone}")
        else:
            await profil_reg_handler(message, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")


@user_router.callback_query(lambda c: c.data in ['confirm_yes', 'confirm_no'])
async def confirm_existing(callback_query: types.CallbackQuery, state: FSMContext):
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç bot –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
    from src.bot import bot
    if callback_query.data == 'confirm_yes':
        data = await state.get_data()
        phone = data.get('phone')
        initial_consent = data.get('initial_consent', False)
        try:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º consent –≤ –±–∞–∑–µ
            if initial_consent:
                update_consent_by_phone(phone, 1)
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–≥–ª–∞—Å–∏–µ (consent=1) –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone} –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")

            await callback_query.message.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! üéâ")
            help_text = ("–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: üìã\n"
                         "/profilReg - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ‚úçÔ∏è\n"
                         "/reg - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ üìÖ\n"
                         "/profil - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üë§\n"
                         "/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä\n"
                         "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã üìñ\n"
                         "/ask - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º ‚ùì\n"
                         "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ ‚ùì")
            await callback_query.message.answer(help_text)
            await state.clear()
            logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone}: {e}")
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")
    else:
        await profil_reg_handler(callback_query.message, state)
    await callback_query.answer()


@user_router.callback_query(lambda c: c.data in ['consent_yes', 'consent_no'], ConsentStates.consent)
async def process_consent(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    phone = data.get('phone')
    try:
        if callback_query.data == 'consent_yes':
            if phone:
                update_consent_by_phone(phone, 1)
            await callback_query.message.answer("–°–æ–≥–ª–∞—Å–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. üéâ")
            help_text = ("–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: üìã\n"
                         "/profilReg - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ‚úçÔ∏è\n"
                         "/reg - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ üìÖ\n"
                         "/profil - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üë§\n"
                         "/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä\n"
                         "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã üìñ\n"
                         "/ask - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º ‚ùì\n"
                         "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ ‚ùì")
            await callback_query.message.answer(help_text)
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {phone or callback_query.from_user.id} –ø—Ä–∏–Ω—è–ª —Å–æ–≥–ª–∞—Å–∏–µ (–æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å PDF –∏ /info)")
        else:
            await callback_query.message.answer("–ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è. üëã")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {phone or callback_query.from_user.id} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Å–æ–≥–ª–∞—Å–∏—è")
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏—è –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone}: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")
    await callback_query.answer()


@user_router.message(Command(commands=['profilReg']))
async def profil_reg_handler(message: types.Message, state: FSMContext):
    await state.set_state(ProfilRegStates.fio)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã, –º–∏–Ω–∏–º—É–º —Ñ–∞–º–∏–ª–∏—è –∏ –∏–º—è): ‚úçÔ∏è", reply_markup=keyboard)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è")


@user_router.message(ProfilRegStates.fio)
async def process_fio(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await state.clear()
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        return
    fio = message.text.strip().title()
    if not re.match(r'^[–ê-–Ø–∞-—èA-Za-z\s]+$', fio) or len(fio.split()) < 2:
        await message.answer(
            "–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã, –º–∏–Ω–∏–º—É–º –¥–≤–∞ —Å–ª–æ–≤–∞ (—Ñ–∞–º–∏–ª–∏—è –∏ –∏–º—è). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. ‚ö†Ô∏è")
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {fio}")
        return
    await state.update_data(fio=fio)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –§–ò–û
    try:
        existing_user = get_user_by_fio(fio)
        if existing_user and existing_user[2] is None:  # –ï—Å–ª–∏ phone None
            await state.update_data(existing_user_id=existing_user[0])
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–î–∞ ‚úÖ", callback_data="previously_used_yes")
            keyboard.button(text="–ù–µ—Ç ‚ùå", callback_data="previously_used_no")
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –ª–∏ –≤—ã –±–æ—Ç–æ–º —Ä–∞–Ω–µ–µ? (–ú—ã –Ω–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –§–ò–û –±–µ–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)",
                                 reply_markup=keyboard.as_markup())
        else:
            await state.set_state(ProfilRegStates.category)
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–°—Ç—É–¥–µ–Ω—Ç üéì", callback_data="cat_student")
            keyboard.button(text="–°–æ—Ç—Ä—É–¥–Ω–∏–∫ üëî", callback_data="cat_employee")
            keyboard.button(text="–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä üåç", callback_data="cat_external")
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: üìÇ", reply_markup=keyboard.as_markup())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –§–ò–û {fio}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")


@user_router.callback_query(lambda c: c.data in ['previously_used_yes', 'previously_used_no'])
async def process_previously_used(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    telegram_id = callback_query.from_user.id
    phone = data.get('phone')
    fio = data.get('fio')
    existing_user_id = data.get


    if callback_query.data == 'previously_used_yes':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        try:
            with get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT id FROM users WHERE phone = ? AND id != ?', (phone, existing_user_id))
                if cursor.fetchone():
                    await callback_query.message.answer(
                        "–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –¥—Ä—É–≥–∏–º –Ω–æ–º–µ—Ä–æ–º. ‚ö†Ô∏è")
                    await state.clear()
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ –§–ò–û {fio} —Å –∑–∞–Ω—è—Ç—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone}")
                    await callback_query.answer()
                    return
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            await state.set_state(ProfilRegStates.category)
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–°—Ç—É–¥–µ–Ω—Ç üéì", callback_data="cat_student")
            keyboard.button(text="–°–æ—Ç—Ä—É–¥–Ω–∏–∫ üëî", callback_data="cat_employee")
            keyboard.button(text="–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä üåç", callback_data="cat_external")
            await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: üìÇ", reply_markup=keyboard.as_markup())
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ –§–ò–û {fio}, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone} –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ –§–ò–û {fio}: {e}")
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")
    else:
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –Ω–æ–≤—ã–π
        await state.set_state(ProfilRegStates.category)
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–°—Ç—É–¥–µ–Ω—Ç üéì", callback_data="cat_student")
        keyboard.button(text="–°–æ—Ç—Ä—É–¥–Ω–∏–∫ üëî", callback_data="cat_employee")
        keyboard.button(text="–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä üåç", callback_data="cat_external")
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: üìÇ", reply_markup=keyboard.as_markup())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –≤—ã–±—Ä–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –§–ò–û {fio}")
    await callback_query.answer()


@user_router.callback_query(lambda c: c.data.startswith('cat_'))
async def process_category(callback_query: types.CallbackQuery, state: FSMContext):
    category = callback_query.data.split('_')[1]
    await state.update_data(category=category)
    if category == 'student':
        await state.set_state(ProfilRegStates.group)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
            resize_keyboard=True
        )
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (—Ñ–æ—Ä–º–∞—Ç: –ë21-302): üìö", reply_markup=keyboard)
    else:
        await state.set_state(ProfilRegStates.social_contacts)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
            resize_keyboard=True
        )
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö (–∏–ª–∏ '–Ω–µ—Ç'): üîó", reply_markup=keyboard)
    await callback_query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}")


@user_router.message(ProfilRegStates.group)
async def process_group(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await state.set_state(ProfilRegStates.fio)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
            resize_keyboard=True
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã, –º–∏–Ω–∏–º—É–º —Ñ–∞–º–∏–ª–∏—è –∏ –∏–º—è): ‚úçÔ∏è",
                             reply_markup=keyboard)
        return
    group = message.text.strip().upper()
    if not re.match(r'^[–ê-–Ø]\d{2}-\d{3}$', group):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã (–ø—Ä–∏–º–µ—Ä: –ë21-302). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. ‚ö†Ô∏è")
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {group}")
        return
    await state.update_data(group=group)
    await state.set_state(ProfilRegStates.social_contacts)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö (–∏–ª–∏ '–Ω–µ—Ç'): üîó", reply_markup=keyboard)


@user_router.message(ProfilRegStates.social_contacts)
async def process_social_contacts(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        data = await state.get_data()
        category = data.get('category')
        if category == 'student':
            await state.set_state(ProfilRegStates.group)
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
                resize_keyboard=True
            )
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (—Ñ–æ—Ä–º–∞—Ç: –ë21-302): üìö", reply_markup=keyboard)
        else:
            await state.set_state(ProfilRegStates.fio)
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
                resize_keyboard=True
            )
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã, –º–∏–Ω–∏–º—É–º —Ñ–∞–º–∏–ª–∏—è –∏ –∏–º—è): ‚úçÔ∏è",
                                 reply_markup=keyboard)
        return
    social_contacts = message.text.strip() if message.text.strip().lower() != '–Ω–µ—Ç' else None
    data = await state.get_data()
    try:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "previously_used_yes", –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
        if data.get('existing_user_id'):
            with get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''UPDATE users SET 
                    telegram_id = ?, phone = ?, category = ?, user_group = ?, social_contacts = ?, profile_status = 'pending'
                    WHERE id = ?''',
                               (message.from_user.id, data.get('phone'), data['category'], data.get('group'),
                                social_contacts, data['existing_user_id']))
                conn.commit()
            logger.info(
                f"–û–±–Ω–æ–≤–ª—ë–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å ID {data['existing_user_id']} –¥–ª—è –§–ò–û {data['fio']} —Å telegram_id {message.from_user.id}")
        else:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            save_or_update_user(message.from_user.id, data.get('phone'), data['fio'],
                                data['category'], data.get('group'), social_contacts)
            logger.info(f"–°–æ–∑–¥–∞–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª—ë–Ω –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –§–ò–û {data['fio']} —Å telegram_id {message.from_user.id}")
        await state.clear()
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. ‚è≥", reply_markup=types.ReplyKeyboardRemove())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {data.get('fio', 'Unknown')}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")


@user_router.message(Command(commands=['help']))
async def help_handler(message: types.Message):
    await message.answer("–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                         "/profilReg - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
                         "/reg - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n"
                         "/profil - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
                         "/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                         "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã\n"
                         "/ask - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º ‚ùì\n"
                         "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /help")


@user_router.message(Command(commands=['reg']))
async def reg_handler(message: types.Message):
    try:
        profile_status = get_profile_status_by_telegram_id(message.from_user.id)
        if not profile_status or profile_status != 'approved':
            await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –æ–¥–æ–±—Ä–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /profilReg. ‚ö†Ô∏è")
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –∏–º–µ–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
            return
        events = get_active_events()
        if not events:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. üìÖ")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
            return
        keyboard = InlineKeyboardBuilder()
        for event in events:
            if len(event) < 6:
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {event}")
                continue
            keyboard.button(text=f"{event[1]} {event[2]} - {event[4]} üìÜ", callback_data=f"reg_{event[0]}")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: üìã", reply_markup=keyboard.as_markup())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –Ω–∞–π–¥–µ–Ω–æ {len(events)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")


@user_router.callback_query(lambda c: c.data.startswith('reg_'))
async def process_register(callback_query: types.CallbackQuery):
    event_id = int(callback_query.data.split('_')[1])
    user_id = callback_query.from_user.id
    try:
        db_user_id = get_user_id_by_telegram_id(user_id)
        if not db_user_id:
            await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /profilReg. ‚ö†Ô∏è")
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id}")
            return
        capacity = get_event_capacity(event_id)
        if capacity is None:
            await callback_query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. ‚ö†Ô∏è")
            logger.error(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        registered_count = get_event_reg_count(event_id)
        if registered_count is None:
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π. ‚ö†Ô∏è")
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {event_id}")
            return
        if registered_count >= capacity:
            await callback_query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ. ‚ùå")
            logger.warning(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id} –∑–∞–ø–æ–ª–Ω–µ–Ω–æ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {registered_count}, –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {capacity})")
            return
        event_date = get_event_date(event_id)
        if not event_date:
            await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. ‚ö†Ô∏è")
            logger.error(f"–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        try:
            reminder_date = (datetime.strptime(event_date, '%Y-%m-%d') - timedelta(days=1)).strftime('%Y-%m-%d')
        except ValueError:
            await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. ‚ö†Ô∏è")
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {event_id}: {event_date}")
            return
        add_registration(db_user_id, event_id)
        add_reminder(db_user_id, event_id, reminder_date)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (DB ID: {db_user_id}) —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id}, –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {reminder_date}")
        await callback_query.answer("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! ‚úÖ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id}: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")


@user_router.message(Command(commands=['profil']))
async def profil_handler(message: types.Message, state: FSMContext):
    try:
        user = get_user_by_telegram_id(message.from_user.id)
        if not user:
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /profilReg. ‚ö†Ô∏è")
            logger.warning(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        if len(user) < 7:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {user}")
            await message.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. ‚ö†Ô∏è")
            return
        user_id = user[0]
        count_gavrilov = get_donations_count_by_center(user_id, "–ì–∞–≤—Ä–∏–ª–æ–≤–∞")
        count_fmba = get_donations_count_by_center(user_id, "–§–ú–ë–ê")
        sum_donations = count_gavrilov + count_fmba
        last_donation = get_last_donation(user_id)
        last_date_center = f"{last_donation[0]} / {last_donation[1]}" if last_donation else "–ù–µ—Ç"
        history = get_donations_history(user_id)
        history_str = "\n".join([f"{d[0]} - {d[1]}" for d in history]) if history else "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏"
        dkm_str = "–î–∞" if user[5] else "–ù–µ—Ç"  # user[5] - dkm (–±—ã–ª–æ user[6], –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å)
        response = (
            f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: üìã\n–§–ò–û: {user[1]}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user[2]}\n–ì—Ä—É–ø–ø–∞: {user[3] or '–ù–µ—Ç'}\n"
            f"–°–æ—Ü—Å–µ—Ç–∏: {user[4] or '–ù–µ—Ç'} üîó\n–°—Ç–∞—Ç—É—Å: {user[6]} ‚öôÔ∏è\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–Ω–∞—Ü–∏–π: {sum_donations} üíâ\n–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–Ω–∞—Ü–∏—è: {last_date_center} üìÖ\n"
            f"–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –î–ö–ú: {dkm_str} ü¶¥\n–ò—Å—Ç–æ—Ä–∏—è –¥–æ–Ω–∞—Ü–∏–π:\n{history_str}")
        registrations = get_user_registrations(user_id)
        if registrations:
            response += "\n\n–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: üìÖ"
            keyboard = InlineKeyboardBuilder()
            for reg in registrations:
                if len(reg) < 4:
                    logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg}")
                    continue
                response += f"\n- {reg[1]} {reg[2]} - {reg[3]}"
                keyboard.button(text=f"–û—Ç–º–µ–Ω–∏—Ç—å {reg[1]} ‚ùå", callback_data=f"unreg_{reg[0]}")
            await message.answer(response, reply_markup=keyboard.as_markup())
        else:
            await message.answer(response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")


@user_router.callback_query(lambda c: c.data.startswith('unreg_'))
async def process_unreg(callback_query: types.CallbackQuery, state: FSMContext):
    event_id = int(callback_query.data.split('_')[1])
    user_id = callback_query.from_user.id
    try:
        db_user_id = get_user_id_by_telegram_id(user_id)
        if not db_user_id:
            await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. ‚ö†Ô∏è")
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id}")
            return
        cancel_registration(db_user_id, event_id)
        await state.set_state(CancelReasonState.reason)
        await state.update_data(reg_id=get_registration_id(db_user_id, event_id))
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ú–µ–¥–æ—Ç–≤–æ–¥ ‚öïÔ∏è")],
                      [KeyboardButton(text="–õ–∏—á–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã üë§")],
                      [KeyboardButton(text="–ù–µ –∑–∞—Ö–æ—Ç–µ–ª üòî")]],
            resize_keyboard=True
        )
        await callback_query.message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã:",
                                            reply_markup=keyboard)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id}, –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {event_id}: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")


def get_registration_id(user_id, event_id):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_connection –∏–∑ db.py
    from src.database.db import get_connection
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT id FROM registrations WHERE user_id = ? AND event_id = ?', (user_id, event_id))
        result = cursor.fetchone()
        return result[0] if result else None


@user_router.message(CancelReasonState.reason)
async def process_cancel_reason(message: types.Message, state: FSMContext):
    reason = message.text
    data = await state.get_data()
    reg_id = data.get('reg_id')
    if reg_id:
        add_non_attendance_reason(reg_id, reason)
        await message.answer("–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ!", reply_markup=types.ReplyKeyboardRemove())
        logger.info(f"–ó–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è reg {reg_id}: {reason}")
    else:
        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω reg_id –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. ‚ö†Ô∏è")
    await state.clear()


@user_router.message(Command(commands=['stats']))
async def stats_handler(message: types.Message):
    try:
        user_id = get_user_id_by_telegram_id(message.from_user.id)
        if user_id:
            reg_count = get_user_registrations_count(user_id)
            await message.answer(f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: üìä\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {reg_count} üìÖ")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {reg_count} —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π")
        else:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profilReg. ‚ö†Ô∏è")
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")


@user_router.message(Command(commands=['ask']))
async def ask_handler(message: types.Message, state: FSMContext):
    profile_status = get_profile_status_by_telegram_id(message.from_user.id)
    if not profile_status or profile_status != 'approved':
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –æ–¥–æ–±—Ä–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /profilReg. ‚ö†Ô∏è")
        return
    await state.set_state(AskQuestionState.text)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º:", reply_markup=keyboard)


@user_router.message(AskQuestionState.text)
async def process_ask_text(message: types.Message, state: FSMContext):
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç bot –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
    from src.bot import bot
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        return
    text = message.text.strip()
    if not text:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    try:
        user_id = get_user_id_by_telegram_id(message.from_user.id)
        if not user_id:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /profilReg. ‚ö†Ô∏è")
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
            return
        question_id = add_question(user_id, text)
        await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º. –û–Ω–∏ –æ—Ç–≤–µ—Ç—è—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                             reply_markup=types.ReplyKeyboardRemove())
        admins = [123456789, 1653833795, 1191457973]
        for admin_id in admins:
            try:
                await bot.send_message(admin_id,
                                       f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}: {text}\n–û—Ç–≤–µ—Ç—å—Ç–µ —á–µ—Ä–µ–∑ /answer")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: {text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await state.clear()


def register_user_handlers(dp):
    dp.include_router(user_router)