from aiogram import types, Router, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.states.states import ProfilEditStates
from src.database.db import logger, add_non_attendance_reason

common_router = Router()

@common_router.message(Command(commands=['info']))
async def info_handler(message: types.Message):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–û –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ –∫—Ä–æ–≤–∏", callback_data="info_blood")
    keyboard.button(text="–û –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ –∫–æ—Å—Ç–Ω–æ–≥–æ –º–æ–∑–≥–∞", callback_data="info_bone")
    keyboard.button(text="–û –¥–æ–Ω–∞—Ü–∏—è—Ö –≤ –ú–ò–§–ò", callback_data="info_mifi")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: üìñ", reply_markup=keyboard.as_markup())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã")

@common_router.callback_query(lambda c: c.data.startswith('info_'))
async def process_info(callback_query: types.CallbackQuery):
    section_map = {
        'blood': 'src/info_texts/blood_donation.txt',
        'bone': 'src/info_texts/bone_marrow_donation.txt',
        'mifi': 'src/info_texts/mifi_donations.txt'
    }
    file_name = section_map.get(callback_query.data.split('_')[1])
    if not file_name:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª. ‚ö†Ô∏è")
        return
    try:
        with open(file_name, 'r', encoding='utf-8') as f:
            text = f.read()
        await callback_query.message.answer(text)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Ä–∞–∑–¥–µ–ª –∏–∑ {file_name}")
    except FileNotFoundError:
        await callback_query.message.answer("–¢–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. ‚ö†Ô∏è")
        logger.warning(f"–§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_name}: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")
    await callback_query.answer()

@common_router.callback_query(lambda c: c.data.startswith('reason_'))
async def process_non_attendance_reason(callback_query: types.CallbackQuery):
    parts = callback_query.data.split('_')
    reason_type = parts[1]
    reg_id = int(parts[2])
    reason_map = {'med': '–º–µ–¥–æ—Ç–≤–æ–¥', 'personal': '–ª–∏—á–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã', 'no': '–Ω–µ –∑–∞—Ö–æ—Ç–µ–ª'}
    reason = reason_map.get(reason_type)
    if not reason:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞. ‚ö†Ô∏è")
        return
    try:
        add_non_attendance_reason(reg_id, reason)
        await callback_query.answer("–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–ø–∏—Å–∞–Ω–∞. ‚úÖ")
        logger.info(f"–ó–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ—è–≤–∫–∏ –¥–ª—è reg {reg_id}: {reason}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏—á–∏–Ω—ã –Ω–µ—è–≤–∫–∏ –¥–ª—è reg {reg_id}: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_common_handlers(dp: Dispatcher):
    dp.include_router(common_router)