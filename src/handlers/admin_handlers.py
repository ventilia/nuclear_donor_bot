import asyncio
from datetime import datetime

from aiogram import types, Router, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardMarkup, KeyboardButton

from src.states.states import AddEventStates, BroadcastState, AnswerQuestionState, AddAdminState, RestoreState
from src.database.db import get_admin_stats, get_pending_users, update_profile_status, get_telegram_id_by_user_id, \
    get_connection, get_user_registrations_count, add_donation, update_dkm, get_user_by_fio, \
    get_donations_count_by_center, get_last_donation
from src.database.db import add_event, get_consented_users_telegram_ids, get_all_events, get_registrations_count
from src.database.db import get_attended_count, get_event_status, update_event_status, get_user_by_id, get_users_paginated
from src.database.db import delete_user_by_id, get_all_users_for_export, add_question, get_unanswered_questions
from src.database.db import mark_question_answered, get_user_telegram_id, import_from_excel, export_users_to_excel, import_users_from_excel
from src.utils.keyboards import is_admin
from src.database.db import logger, add_admin
import openpyxl

admin_router = Router()

@admin_router.message(Command(commands=['add_admin']))
async def add_admin_handler(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        return
    await state.set_state(AddAdminState.telegram_id)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:", reply_markup=keyboard)

@admin_router.message(AddAdminState.telegram_id)
async def process_add_admin_id(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        return
    try:
        telegram_id = int(message.text.strip())
        await state.update_data(telegram_id=telegram_id)
        await state.set_state(AddAdminState.confirm)
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="add_admin_confirm")
        keyboard.button(text="–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="add_admin_cancel")
        await message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ —Å ID {telegram_id}?", reply_markup=keyboard.as_markup())
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. ‚ö†Ô∏è")

@admin_router.callback_query(lambda c: c.data in ['add_admin_confirm', 'add_admin_cancel'], AddAdminState.confirm)
async def confirm_add_admin(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'add_admin_cancel':
        await state.clear()
        await callback_query.message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback_query.answer()
        return
    data = await state.get_data()
    telegram_id = data.get('telegram_id')
    try:
        add_admin(telegram_id)
        await callback_query.message.answer(f"–ê–¥–º–∏–Ω —Å ID {telegram_id} –¥–æ–±–∞–≤–ª–µ–Ω. ‚úÖ")
        logger.info(f"–ê–¥–º–∏–Ω {callback_query.from_user.id} –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ {telegram_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ {telegram_id}: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. ‚ö†Ô∏è")
    await state.clear()
    await callback_query.answer()

@admin_router.message(Command(commands=['backup_users']))
async def backup_users_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        return
    try:
        filename = export_users_to_excel()
        await message.answer_document(types.FSInputFile(filename), caption="–ë—ç–∫–∞–ø —Ç–∞–±–ª–∏—Ü—ã users. üìÇ")
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} —Å–æ–∑–¥–∞–ª –±—ç–∫–∞–ø users")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞ users: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞. ‚ö†Ô∏è")

@admin_router.message(Command(commands=['restore_users']))
async def restore_users_handler(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        return
    await state.set_state(RestoreState.file)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è users (–æ–ø–∞—Å–Ω–æ: –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –¥–∞–Ω–Ω—ã–µ!): üìÇ", reply_markup=keyboard)

@admin_router.message(lambda m: m.document and m.document.file_name.endswith('.xlsx'), RestoreState.file)
async def process_restore_file(message: types.Message, state: FSMContext):
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç bot
    from src.bot import bot
    if not message.document:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel (.xlsx). ‚ö†Ô∏è")
        return
    try:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        temp_filename = "temp_restore.xlsx"
        await bot.download_file(file_path, temp_filename)
        await state.update_data(filename=temp_filename)
        await state.set_state(RestoreState.confirm)
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="restore_confirm")
        keyboard.button(text="–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="restore_cancel")
        await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (—ç—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ users!)?", reply_markup=keyboard.as_markup())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. ‚ö†Ô∏è")

@admin_router.callback_query(lambda c: c.data in ['restore_confirm', 'restore_cancel'], RestoreState.confirm)
async def confirm_restore(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'restore_cancel':
        await state.clear()
        await callback_query.message.answer("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback_query.answer()
        return
    data = await state.get_data()
    filename = data.get('filename')
    try:
        import_users_from_excel(filename)
        await callback_query.message.answer("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ users –∑–∞–≤–µ—Ä—à–µ–Ω–æ. ‚úÖ")
        logger.info(f"–ê–¥–º–∏–Ω {callback_query.from_user.id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª users –∏–∑ –±—ç–∫–∞–ø–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è users: {e}")
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏. ‚ö†Ô∏è")
    await state.clear()
    await callback_query.answer()

@admin_router.message(Command(commands=['answer']))
async def answer_handler(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        return
    try:
        questions = get_unanswered_questions()
        if not questions:
            await message.answer("–ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
            return
        keyboard = InlineKeyboardBuilder()
        for q in questions:
            user_tg_id = get_user_telegram_id(q[1])
            keyboard.button(text=f"–í–æ–ø—Ä–æ—Å {q[0]} –æ—Ç {user_tg_id}", callback_data=f"ans_{q[0]}")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞:", reply_markup=keyboard.as_markup())
        await state.set_state(AnswerQuestionState.select)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@admin_router.callback_query(lambda c: c.data.startswith('ans_'), AnswerQuestionState.select)
async def select_question(callback_query: types.CallbackQuery, state: FSMContext):
    question_id = int(callback_query.data.split('_')[1])
    await state.update_data(question_id=question_id)
    await state.set_state(AnswerQuestionState.response)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:", reply_markup=keyboard)
    await callback_query.answer()

@admin_router.message(AnswerQuestionState.response)
async def process_answer_text(message: types.Message, state: FSMContext):
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç bot –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from src.bot import bot
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await state.set_state(AnswerQuestionState.select)
        await answer_handler(message, state)
        return
    text = message.text.strip()
    if not text:
        await message.answer("–û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    data = await state.get_data()
    question_id = data.get('question_id')
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT user_id FROM questions WHERE id = ?', (question_id,))
            user_id = cursor.fetchone()[0]
        user_tg_id = get_user_telegram_id(user_id)
        if user_tg_id:
            await bot.send_message(user_tg_id, f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤: {text}")
            mark_question_answered(question_id)
            await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", reply_markup=types.ReplyKeyboardRemove())
            logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å {question_id}")
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å {question_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    await state.clear()

@admin_router.message(Command(commands=['broadcast']))
async def broadcast_handler(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        return
    await state.set_state(BroadcastState.text)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:", reply_markup=keyboard)

@admin_router.message(BroadcastState.text)
async def process_broadcast_text(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await state.clear()
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        return
    text = message.text.strip()
    if not text:
        await message.answer("–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(text=text)
    await state.set_state(BroadcastState.photo)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ë–µ–∑ —Ñ–æ—Ç–æ üìÑ")],
                  [KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ —Ñ–æ—Ç–æ':", reply_markup=keyboard)

@admin_router.message(BroadcastState.photo)
async def process_broadcast_photo(message: types.Message, state: FSMContext):
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç bot –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from src.bot import bot
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await state.set_state(BroadcastState.text)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
            resize_keyboard=True
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=keyboard)
        return
    if message.text == "–ë–µ–∑ —Ñ–æ—Ç–æ üìÑ":
        photo = None
    elif message.photo:
        photo = message.photo[-1].file_id
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ë–µ–∑ —Ñ–æ—Ç–æ'.")
        return
    await state.update_data(photo=photo)
    await state.set_state(BroadcastState.confirm)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="broadcast_confirm")
    keyboard.button(text="–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="broadcast_cancel")
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=keyboard.as_markup())

@admin_router.callback_query(lambda c: c.data in ['broadcast_confirm', 'broadcast_cancel'], BroadcastState.confirm)
async def confirm_broadcast(callback_query: types.CallbackQuery, state: FSMContext):
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç bot –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from src.bot import bot
    if callback_query.data == 'broadcast_cancel':
        await state.clear()
        await callback_query.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await callback_query.answer()
        return
    data = await state.get_data()
    text = data.get('text')
    photo = data.get('photo')
    try:
        users = get_consented_users_telegram_ids()
        sent_count = 0
        for tg_id in users:
            try:
                if photo:
                    await bot.send_photo(tg_id, photo, caption=text)
                else:
                    await bot.send_message(tg_id, text)
                sent_count += 1
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")
        await callback_query.message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        logger.info(f"–ê–¥–º–∏–Ω {callback_query.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É: {text[:50]}...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ.")
    await state.clear()
    await callback_query.answer()

@admin_router.message(Command(commands=['admin_stats']))
async def admin_stats_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        return
    try:
        users_count, events_count, reg_count = get_admin_stats()
        await message.answer(
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: üìä\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count} üë•\n–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {events_count} üìÖ\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {reg_count} üìù")
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

@admin_router.message(Command(commands=['admin_reg']))
async def admin_reg_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∞–º–∏")
        return
    try:
        pending_users = get_pending_users()
        if not pending_users:
            await message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫. üì≠")
            logger.info("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
            return
        for user in pending_users:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–ü—Ä–∏–Ω—è—Ç—å ‚úÖ", callback_data=f"approve_{user[0]}")
            keyboard.button(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", callback_data=f"reject_{user[0]}")
            await message.answer(
                f"–ó–∞—è–≤–∫–∞: {user[1]}\n–ì—Ä—É–ø–ø–∞: {user[2]}\n–°–æ—Ü—Å–µ—Ç–∏: {user[3]}",
                reply_markup=keyboard.as_markup())
            logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user[1]} –¥–ª—è –∞–¥–º–∏–Ω–∞ {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

@admin_router.callback_query(lambda c: c.data.startswith('approve_') or c.data.startswith('reject_'))
async def process_profile_action(callback_query: types.CallbackQuery):
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç bot –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from src.bot import bot
    action, user_id_str = callback_query.data.split('_')
    user_id = int(user_id_str)
    try:
        status = 'approved' if action == 'approve' else 'rejected'
        update_profile_status(user_id, status)
        telegram_id = get_telegram_id_by_user_id(user_id)
        if action == 'approve' and telegram_id is not None:
            await bot.send_message(telegram_id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª –ø—Ä–∏–Ω—è—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. ‚úÖ")
            help_text = ("–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: üìã\n"
                         "/profilReg - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ‚úçÔ∏è\n"
                         "/reg - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ üìÖ\n"
                         "/profil - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üë§\n"
                         "/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä\n"
                         "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã üìñ\n"
                         "/ask - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º ‚ùì\n"
                         "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ ‚ùì")
            await bot.send_message(telegram_id, help_text)
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} {status} –∞–¥–º–∏–Ω–æ–º {callback_query.from_user.id}")
        await callback_query.answer(f"–ü—Ä–æ—Ñ–∏–ª—å {'–ø—Ä–∏–Ω—è—Ç ‚úÖ' if action == 'approve' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω ‚ùå'}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ—Ñ–∏–ª—è ID {user_id}: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

@admin_router.message(Command(commands=['admin_help']))
async def admin_help_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫—É—é –ø–æ–º–æ—â—å")
        return
    await message.answer("/admin_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞\n"
                         "/admin_reg - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏\n"
                         "/add_event - –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n"
                         "/stats_event - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
                         "/see_profile - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π\n"
                         "/see_profile (—á–∏—Å–ª–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç) - –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∞–π–¥–∏\n"
                         "/import_excel - –ò–º–ø–æ—Ä—Ç –∏–∑ Excel\n"
                         "/upload_stats - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Excel\n"
                         "/export_stats - –í—ã–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ Excel\n"
                         "/answer - –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                         "/broadcast - –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                         "/add_admin - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
                         "/backup_users - –ë—ç–∫–∞–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                         "/restore_users - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±—ç–∫–∞–ø–∞\n"
                         "/help - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥")
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥")

@admin_router.message(Command(commands=['add_event']))
async def add_event_handler(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
        return
    await state.set_state(AddEventStates.date)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (YYYY-MM-DD): üìÖ", reply_markup=keyboard)
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")

@admin_router.message(AddEventStates.date)
async def process_event_date(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        return
    try:
        event_date = datetime.strptime(message.text, '%Y-%m-%d')
        if event_date < datetime.now().replace(hour=0, minute=0, second=0, microsecond=0):
            await message.answer("–î–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞. –í–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD. ‚ö†Ô∏è")
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å –ø—Ä–æ—à–µ–¥—à–µ–π –¥–∞—Ç–æ–π {message.text} –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}")
            return
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD. ‚ö†Ô∏è")
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}: {message.text}")
        return
    await state.update_data(date=message.text)
    await state.set_state(AddEventStates.time)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (HH:MM): ‚è∞", reply_markup=keyboard)

@admin_router.message(AddEventStates.time)
async def process_event_time(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await state.set_state(AddEventStates.date)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
            resize_keyboard=True
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (YYYY-MM-DD): üìÖ", reply_markup=keyboard)
        return
    await state.update_data(time=message.text)
    await state.set_state(AddEventStates.location)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ: üìç", reply_markup=keyboard)

@admin_router.message(AddEventStates.location)
async def process_event_location(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await state.set_state(AddEventStates.time)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
            resize_keyboard=True
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (HH:MM): ‚è∞", reply_markup=keyboard)
        return
    await state.update_data(location=message.text)
    await state.set_state(AddEventStates.description)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ: üìù", reply_markup=keyboard)

@admin_router.message(AddEventStates.description)
async def process_event_description(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await state.set_state(AddEventStates.location)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
            resize_keyboard=True
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ: üìç", reply_markup=keyboard)
        return
    await state.update_data(description=message.text)
    await state.set_state(AddEventStates.capacity)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: üë•", reply_markup=keyboard)

@admin_router.message(AddEventStates.capacity)
async def process_event_capacity(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await state.set_state(AddEventStates.description)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
            resize_keyboard=True
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ: üìù", reply_markup=keyboard)
        return
    try:
        capacity = int(message.text)
        if capacity <= 0:
            raise ValueError("–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
    except ValueError:
        await message.answer("–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0. ‚ö†Ô∏è")
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}: {message.text}")
        return
    data = await state.get_data()
    try:
        add_event(data['date'], data['time'], data['location'], data['description'], capacity)
        await state.clear()
        await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. ‚úÖ", reply_markup=types.ReplyKeyboardRemove())
        asyncio.create_task(send_new_event_notification(data['date'], data['time'], data['location'], data['description']))
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –¥–æ–±–∞–≤–∏–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {data['description']}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

async def send_new_event_notification(date, time, location, description):
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç bot –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from src.bot import bot
    try:
        users = get_consented_users_telegram_ids()
        for telegram_id in users:
            try:
                await bot.send_message(telegram_id, f"–ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {description} üìÖ\n–î–∞—Ç–∞: {date} {time} ‚è∞\n–ú–µ—Å—Ç–æ: {location} üìç\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /reg! ‚úÖ")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")
        logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –æ –Ω–æ–≤–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

@admin_router.message(Command(commands=['stats_event']))
async def stats_event_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
        return
    try:
        events = get_all_events()
        for event in events:
            reg_count = get_registrations_count(event[0])
            donors_count = get_attended_count(event[0])
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–ó–∞–º–æ—Ä–æ–∑–∏—Ç—å ‚ùÑÔ∏è" if event[5] == 'active' else "–†–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å üî•",
                            callback_data=f"toggle_{event[0]}")
            await message.answer(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event[1]} {event[2]} - {event[3]} üìÖ\n"
                                 f"–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {event[4]} üë•\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {reg_count} üìù\n–î–æ–Ω–æ—Ä–æ–≤: {donors_count} üíâ\n–°—Ç–∞—Ç—É—Å: {event[5]} ‚öôÔ∏è",
                                 reply_markup=keyboard.as_markup())
            logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ID {event[0]}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

@admin_router.callback_query(lambda c: c.data.startswith('toggle_'))
async def toggle_event(callback_query: types.CallbackQuery):
    event_id = int(callback_query.data.split('_')[1])
    try:
        current_status = get_event_status(event_id)
        new_status = 'frozen' if current_status == 'active' else 'active'
        update_event_status(event_id, new_status)
        logger.info(f"–ê–¥–º–∏–Ω {callback_query.from_user.id} –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {event_id} –Ω–∞ {new_status}")
        await callback_query.answer(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {'–∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ ‚ùÑÔ∏è' if new_status == 'frozen' else '—Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω–æ üî•'}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {event_id}: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

@admin_router.message(Command(commands=['see_profile']))
async def see_profile_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏")
        return
    args = message.text.split()
    if len(args) > 1:
        try:
            search_id = int(args[1])
            await show_user_detail_by_id(message, search_id)
            return
        except ValueError:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç /see_profile <—á–∏—Å–ª–æ>. ‚ö†Ô∏è")
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤ –ø–æ–∏—Å–∫–µ –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}: {args[1]}")
            return
    await show_profiles(message, offset=0)

async def show_user_detail_by_id(message: types.Message, user_id: int):
    try:
        user = get_user_by_id(user_id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. ‚ö†Ô∏è")
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∞ {message.from_user.id}")
            return
        response = (f"–ü–æ–ª–Ω–∞—è –∞–Ω–∫–µ—Ç–∞: üìã\n"
                    f"ID: {user[0]}\n"
                    f"Telegram ID: {user[1]}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {user[2]} üìû\n"
                    f"–§–ò–û: {user[3]}\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user[4]}\n"
                    f"–ì—Ä—É–ø–ø–∞: {user[5]} üìö\n"
                    f"–°–æ—Ü—Å–µ—Ç–∏: {user[6]} üîó\n"
                    f"DKM: {'–î–∞' if user[7] else '–ù–µ—Ç'} ü¶¥\n"
                    f"–°—Ç–∞—Ç—É—Å: {user[9]} ‚öôÔ∏è")
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–ö–∏–∫–Ω—É—Ç—å ‚ùå", callback_data=f"kick_{user_id}")
        await message.answer(response, reply_markup=keyboard.as_markup())
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ ID {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ—Ñ–∏–ª—è ID {user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

async def show_profiles(message: types.Message, offset: int):
    try:
        users = get_users_paginated(5, offset)
        if not users:
            await message.answer("–ü—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. üì≠")
            logger.info("–ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        pagination_keyboard = InlineKeyboardBuilder()
        if offset > 0:
            pagination_keyboard.button(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data=f"prev_{offset - 5}")
        if len(users) == 5:
            pagination_keyboard.button(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"next_{offset + 5}")
        pagination_markup = pagination_keyboard.as_markup() if pagination_keyboard.inline_keyboard else None
        for user in users:
            reg_count = get_user_registrations_count(user[0])
            text = f"{user[1]}, –ì—Ä—É–ø–ø–∞: {user[2]}, (ID: {user[0]}), –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {reg_count} üìù"
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ üîç", callback_data=f"detail_{user[0]}")
            await message.answer(text, reply_markup=keyboard.as_markup())
        if pagination_markup:
            await message.answer("–ù–∞–≤–∏–≥–∞—Ü–∏—è: ‚ÜîÔ∏è", reply_markup=pagination_markup)
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π, offset: {offset}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

@admin_router.callback_query(lambda c: c.data.startswith('detail_'))
async def show_user_detail(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[1])
    try:
        user = get_user_by_id(user_id)
        if not user:
            await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. ‚ö†Ô∏è")
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        response = (f"–ü–æ–ª–Ω–∞—è –∞–Ω–∫–µ—Ç–∞: üìã\n"
                    f"ID: {user[0]}\n"
                    f"Telegram ID: {user[1]}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {user[2]} üìû\n"
                    f"–§–ò–û: {user[3]}\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user[4]}\n"
                    f"–ì—Ä—É–ø–ø–∞: {user[5]} üìö\n"
                    f"–°–æ—Ü—Å–µ—Ç–∏: {user[6]} üîó\n"
                    f"DKM: {'–î–∞' if user[7] else '–ù–µ—Ç'} ü¶¥\n"
                    f"–°—Ç–∞—Ç—É—Å: {user[9]} ‚öôÔ∏è")
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–ö–∏–∫–Ω—É—Ç—å ‚ùå", callback_data=f"kick_{user_id}")
        await callback_query.message.answer(response, reply_markup=keyboard.as_markup())
        logger.info(f"–ê–¥–º–∏–Ω {callback_query.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ—Ñ–∏–ª—è ID {user_id}: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

@admin_router.callback_query(lambda c: c.data.startswith('kick_'))
async def kick_user(callback_query: types.CallbackQuery):
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç bot –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from src.bot import bot
    user_id = int(callback_query.data.split('_')[1])
    try:
        telegram_id = get_telegram_id_by_user_id(user_id)
        delete_user_by_id(user_id)
        if telegram_id is not None:
            await bot.send_message(telegram_id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. ‚ùå")
        logger.info(f"–ê–¥–º–∏–Ω {callback_query.from_user.id} —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω. ‚úÖ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

@admin_router.callback_query(lambda c: c.data.startswith('next_') or c.data.startswith('prev_'))
async def process_pagination(callback_query: types.CallbackQuery):
    action, offset = callback_query.data.split('_')
    offset = int(offset)
    await show_profiles(callback_query.message, offset)
    await callback_query.answer()
    logger.info(f"–ê–¥–º–∏–Ω {callback_query.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª–µ–π, offset: {offset}")

@admin_router.message(Command(commands=['import_excel']))
async def import_excel_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏–º–ø–æ—Ä—Ç Excel")
        return
    try:
        import_from_excel()
        await message.answer("–î–∞–Ω–Ω—ã–µ –∏–∑ Excel —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã. ‚úÖ")
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤—ã–ø–æ–ª–Ω–∏–ª –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)} ‚ö†Ô∏è")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ Excel –∞–¥–º–∏–Ω–æ–º {message.from_user.id}: {e}")

@admin_router.message(Command(commands=['upload_stats']))
async def upload_stats_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        return
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π (–§–ò–û, –¥–∞—Ç–∞, –¶–ö). üìÇ")

@admin_router.message(lambda message: message.document and message.document.file_name.endswith('.xlsx'))
async def process_upload_stats(message: types.Message):
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç bot –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from src.bot import bot
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        return
    try:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        await bot.download_file(file_path, "temp_stats.xlsx")
        wb = openpyxl.load_workbook('temp_stats.xlsx')
        sheet = wb.active
        for row in sheet.iter_rows(min_row=2, values_only=True):
            fio = str(row[0]).strip()
            date = str(row[5]) if row[5] else None
            center = '–ì–∞–≤—Ä–∏–ª–æ–≤–∞' if row[2] else '–§–ú–ë–ê' if row[3] else None
            if not center or not date:
                continue
            user = get_user_by_fio(fio)
            if user:
                user_id = user[0]
                add_donation(user_id, date, center)
                if len(row) > 9 and row[9]:
                    update_dkm(user_id, 1)
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞. ‚úÖ")
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–≥—Ä—É–∑–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Excel")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {str(e)} ‚ö†Ô∏è")
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ stats Excel: {e}")

@admin_router.message(Command(commands=['export_stats']))
async def export_stats_handler(message: types.Message):
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç bot –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from src.bot import bot
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        return
    try:
        wb = openpyxl.Workbook()
        sheet = wb.active
        sheet.append(['ID', '–§–ò–û', '–ì—Ä—É–ø–ø–∞', '–ö–æ–ª-–≤–æ –ì–∞–≤—Ä–∏–ª–æ–≤–∞', '–ö–æ–ª-–≤–æ –§–ú–ë–ê', '–°—É–º–º–∞', '–ü–æ—Å–ª–µ–¥–Ω—è—è –ì–∞–≤—Ä–∏–ª–æ–≤–∞', '–ü–æ—Å–ª–µ–¥–Ω—è—è –§–ú–ë–ê', '–¢–µ–ª–µ—Ñ–æ–Ω'])
        users = get_all_users_for_export()
        for user in users:
            user_id = user[0]
            fio = user[3]
            group = user[5]
            phone = user[2]
            count_g = get_donations_count_by_center(user_id, "–ì–∞–≤—Ä–∏–ª–æ–≤–∞")
            count_f = get_donations_count_by_center(user_id, "–§–ú–ë–ê")
            sum_d = count_g + count_f
            last_g = get_last_donation(user_id)[0] if get_last_donation(user_id) and get_last_donation(user_id)[1] == "–ì–∞–≤—Ä–∏–ª–æ–≤–∞" else ''
            last_f = get_last_donation(user_id)[0] if get_last_donation(user_id) and get_last_donation(user_id)[1] == "–§–ú–ë–ê" else ''
            sheet.append([user_id, fio, group, count_g, count_f, sum_d, last_g, last_f, phone])
        wb.save('export_stats.xlsx')
        await bot.send_document(message.chat.id, types.FSInputFile('export_stats.xlsx'))
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤—ã–≥—Ä—É–∑–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ: {str(e)} ‚ö†Ô∏è")
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ stats: {e}")

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_admin_handlers(dp: Dispatcher):
    dp.include_router(admin_router)