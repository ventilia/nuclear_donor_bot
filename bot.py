# bot.py
import asyncio
import schedule
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardMarkup, KeyboardButton
import re
import openpyxl  # –î–ª—è export_stats, –Ω–æ –∑–∞–≥—Ä—É–∑–∫–∞ –≤ db.py

from db import (init_db, import_from_excel, get_user_by_phone, get_consent_by_phone, update_consent_by_phone,
                save_or_update_user, get_profile_status_by_telegram_id, get_active_events, get_user_by_telegram_id,
                get_donations_count_by_center, get_last_donation, get_donations_history, get_user_registrations,
                get_user_registrations_count, get_admin_stats, get_pending_users,
                update_profile_status, get_telegram_id_by_user_id, add_event, get_consented_users_telegram_ids,
                get_all_events, get_registrations_count, get_attended_count, get_event_status, update_event_status,
                get_user_by_id, get_users_paginated, delete_user_by_id, get_all_users_for_export,
                get_reminders_to_send, get_event_by_id, delete_reminder, get_past_events,
                get_non_attended_registrations,
                add_non_attendance_reason, get_user_id_by_telegram_id, get_event_capacity,
                get_registrations_count as get_event_reg_count,
                get_event_date, add_registration, add_reminder, cancel_registration, add_donation, update_dkm,
                get_user_by_name_surname, logger, add_question, get_unanswered_questions, mark_question_answered,
                get_user_telegram_id, get_connection)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7893139526:AAEw3mRwp8btOI4HWWhbLzL0j48kaQBUa50"
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π ID 1191457973)
def is_admin(user_id):
    admins = [123456789, 1653833795, 1191457973]  # –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    return user_id in admins

# –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ: —É–±—Ä–∞–Ω—ã blood_group, medical_exemption, student_id)
class ProfilRegStates(StatesGroup):
    phone_confirm = State()
    name = State()
    surname = State()
    category = State()
    group = State()
    social_contacts = State()  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π (optional)

class ConsentStates(StatesGroup):
    consent = State()

class ProfilEditStates(StatesGroup):
    field = State()
    value = State()

class AddEventStates(StatesGroup):
    date = State()
    time = State()
    location = State()
    description = State()
    capacity = State()

class AskQuestionState(StatesGroup):
    text = State()

class AnswerQuestionState(StatesGroup):
    select = State()
    response = State()

class CancelReasonState(StatesGroup):
    reason = State()

class BroadcastState(StatesGroup):
    text = State()
    photo = State()
    confirm = State()

# --- –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---

@dp.message(Command(commands=['start']))
async def start_handler(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞–Ω–Ω–µ—Ä–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è frame 3.jpg)
    try:
        await bot.send_photo(message.chat.id, types.FSInputFile('frame 3.jpg'), caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –î–Ω—è –î–æ–Ω–æ—Ä–∞ –ú–ò–§–ò! üíâ‚ù§Ô∏è")
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª 'frame 3.jpg' –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–∞–Ω–Ω–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –î–Ω—è –î–æ–Ω–æ—Ä–∞ –ú–ò–§–ò! üíâ‚ù§Ô∏è")
    # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    try:
        await bot.send_document(message.chat.id, types.FSInputFile('privacy_policy.pdf'), caption="–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º (–ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏). üìÑ")
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª 'privacy_policy.pdf' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await message.answer("–§–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. ‚ö†Ô∏è")
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")
        return
    # –ó–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–∏—è —Å –Ω–æ–≤–æ–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–æ–π
    await state.set_state(ConsentStates.consent)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–°–æ–≥–ª–∞—Å–µ–Ω ‚úÖ", callback_data="consent_yes")
    keyboard.button(text="–ù–µ—Ç ‚ùå", callback_data="consent_no")
    await message.answer("–Ø –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –∏ –æ–±—è–∑—É—é—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ /info –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –Ω–∞ –ª—é–±–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ. üìÑ",
                         reply_markup=keyboard.as_markup())

@dp.callback_query(lambda c: c.data in ['consent_yes', 'consent_no'], ConsentStates.consent)
async def process_initial_consent(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'consent_yes':
        await state.update_data(initial_consent=True)  # –§–ª–∞–≥ —Å–æ–≥–ª–∞—Å–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû", request_contact=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await callback_query.message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. üîë", reply_markup=keyboard)
        await state.set_state(ProfilRegStates.phone_confirm)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –ø—Ä–∏–Ω—è–ª —Å–æ–≥–ª–∞—Å–∏–µ (–æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å PDF –∏ /info)")
    else:
        await callback_query.message.answer("–ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è. üëã")
        await state.clear()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Å–æ–≥–ª–∞—Å–∏—è")
    await callback_query.answer()

@dp.message(ProfilRegStates.phone_confirm)
async def process_phone(message: types.Message, state: FSMContext):
    if not message.contact:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞. ‚ö†Ô∏è")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç")
        return
    phone = message.contact.phone_number
    try:
        user = get_user_by_phone(phone)
        await state.update_data(phone=phone)
        if user:
            await state.update_data(name=user[3], surname=user[4], category=user[5], group=user[6], social_contacts=user[7])  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Ä—è–¥–æ–∫ surname/name
            response = f"–í—ã —É–∂–µ –≤ –±–∞–∑–µ: {user[3]} {user[4]}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {user[5]}, –≥—Ä—É–ø–ø–∞: {user[6]}. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ? (–î–∞/–ù–µ—Ç) ‚úÖ/‚ùå"
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–î–∞ ‚úÖ", callback_data="confirm_yes")
            keyboard.button(text="–ù–µ—Ç ‚ùå", callback_data="confirm_no")
            await message.answer(response, reply_markup=keyboard.as_markup())
            logger.info(f"–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone}")
        else:
            await profil_reg_handler(message, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

@dp.callback_query(lambda c: c.data in ['confirm_yes', 'confirm_no'])
async def confirm_existing(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'confirm_yes':
        data = await state.get_data()
        phone = data['phone']
        try:
            consent = get_consent_by_phone(phone)
            if consent is None or not consent:
                # –î–ª—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö (consent=0) –∏–ª–∏ –Ω–æ–≤—ã—Ö ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ
                try:
                    await bot.send_document(callback_query.message.chat.id, types.FSInputFile('privacy_policy.pdf'), caption="–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º (–ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏). üìÑ")
                except FileNotFoundError:
                    logger.warning("–§–∞–π–ª 'privacy_policy.pdf' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    await callback_query.message.answer("–§–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. ‚ö†Ô∏è")
                    return
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")
                    await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")
                    return
                await state.set_state(ConsentStates.consent)
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text="–°–æ–≥–ª–∞—Å–µ–Ω ‚úÖ", callback_data="consent_yes")
                keyboard.button(text="–ù–µ—Ç ‚ùå", callback_data="consent_no")
                await callback_query.message.answer("–Ø –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –∏ –æ–±—è–∑—É—é—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ /info –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –Ω–∞ –ª—é–±–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ. üìÑ",
                                                    reply_markup=keyboard.as_markup())
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {phone} –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ (—Å PDF –∏ /info)")
            else:
                await callback_query.message.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! üéâ")
                # –û—Ç–ø—Ä–∞–≤–∫–∞ /help –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                help_text = ("–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: üìã\n"
                             "/profilReg - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ‚úçÔ∏è\n"
                             "/reg - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ üìÖ\n"
                             "/profil - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üë§\n"
                             "/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä\n"
                             "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã üìñ\n"
                             "/ask - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º ‚ùì\n"
                             "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ ‚ùì")
                await callback_query.message.answer(help_text)
                await state.clear()
                logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {phone}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–≥–ª–∞—Å–∏—è –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone}: {e}")
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")
    else:
        await profil_reg_handler(callback_query.message, state)
    await callback_query.answer()

@dp.callback_query(lambda c: c.data in ['consent_yes', 'consent_no'], ConsentStates.consent)
async def process_consent(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    phone = data.get('phone')
    try:
        if callback_query.data == 'consent_yes':
            if phone:
                update_consent_by_phone(phone, 1)
            await callback_query.message.answer("–°–æ–≥–ª–∞—Å–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. üéâ")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {phone or callback_query.from_user.id} –ø—Ä–∏–Ω—è–ª —Å–æ–≥–ª–∞—Å–∏–µ (–æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å PDF –∏ /info)")
        else:
            await callback_query.message.answer("–ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è. üëã")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {phone or callback_query.from_user.id} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Å–æ–≥–ª–∞—Å–∏—è")
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏—è –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone}: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")
    await callback_query.answer()

@dp.message(Command(commands=['profilReg']))
async def profil_reg_handler(message: types.Message, state: FSMContext):
    await state.set_state(ProfilRegStates.name)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã): ‚úçÔ∏è", reply_markup=keyboard)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è")

@dp.message(ProfilRegStates.name)
async def process_name(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await state.clear()
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        return
    name = message.text.strip().capitalize()
    if not re.match(r'^[–ê-–Ø–∞-—èA-Za-z\s]+$', name):
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. ‚ö†Ô∏è")
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {name}")
        return
    await state.update_data(name=name)
    await state.set_state(ProfilRegStates.surname)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã): ‚úçÔ∏è", reply_markup=keyboard)

@dp.message(ProfilRegStates.surname)
async def process_surname(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await state.set_state(ProfilRegStates.name)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
            resize_keyboard=True
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã): ‚úçÔ∏è", reply_markup=keyboard)
        return
    surname = message.text.strip().capitalize()
    if not re.match(r'^[–ê-–Ø–∞-—èA-Za-z\s]+$', surname):
        await message.answer("–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. ‚ö†Ô∏è")
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {surname}")
        return
    await state.update_data(surname=surname)
    await state.set_state(ProfilRegStates.category)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–°—Ç—É–¥–µ–Ω—Ç üéì", callback_data="cat_student")
    keyboard.button(text="–°–æ—Ç—Ä—É–¥–Ω–∏–∫ üëî", callback_data="cat_employee")
    keyboard.button(text="–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä üåç", callback_data="cat_external")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: üìÇ", reply_markup=keyboard.as_markup())

@dp.callback_query(lambda c: c.data.startswith('cat_'))
async def process_category(callback_query: types.CallbackQuery, state: FSMContext):
    category = callback_query.data.split('_')[1]
    await state.update_data(category=category)
    if category == 'student':
        await state.set_state(ProfilRegStates.group)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
            resize_keyboard=True
        )
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (—Ñ–æ—Ä–º–∞—Ç: –ë21-302): üìö", reply_markup=keyboard)
    else:
        await state.set_state(ProfilRegStates.social_contacts)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
            resize_keyboard=True
        )
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö (–∏–ª–∏ '–Ω–µ—Ç'): üîó", reply_markup=keyboard)
    await callback_query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}")

@dp.message(ProfilRegStates.group)
async def process_group(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await state.set_state(ProfilRegStates.category)
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–°—Ç—É–¥–µ–Ω—Ç üéì", callback_data="cat_student")
        keyboard.button(text="–°–æ—Ç—Ä—É–¥–Ω–∏–∫ üëî", callback_data="cat_employee")
        keyboard.button(text="–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä üåç", callback_data="cat_external")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: üìÇ", reply_markup=keyboard.as_markup())
        return
    group = message.text.strip().upper()
    if not re.match(r'^[–ê-–Ø]\d{2}-\d{3}$', group):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã (–ø—Ä–∏–º–µ—Ä: –ë21-302). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. ‚ö†Ô∏è")
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {group}")
        return
    await state.update_data(group=group)
    await state.set_state(ProfilRegStates.social_contacts)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö (–∏–ª–∏ '–Ω–µ—Ç'): üîó", reply_markup=keyboard)

@dp.message(ProfilRegStates.social_contacts)
async def process_social_contacts(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        data = await state.get_data()
        category = data.get('category')
        if category == 'student':
            await state.set_state(ProfilRegStates.group)
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
                resize_keyboard=True
            )
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (—Ñ–æ—Ä–º–∞—Ç: –ë21-302): üìö", reply_markup=keyboard)
        else:
            await state.set_state(ProfilRegStates.category)
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–°—Ç—É–¥–µ–Ω—Ç üéì", callback_data="cat_student")
            keyboard.button(text="–°–æ—Ç—Ä—É–¥–Ω–∏–∫ üëî", callback_data="cat_employee")
            keyboard.button(text="–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä üåç", callback_data="cat_external")
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: üìÇ", reply_markup=keyboard.as_markup())
        return
    social_contacts = message.text.strip() if message.text.strip().lower() != '–Ω–µ—Ç' else None
    data = await state.get_data()
    try:
        save_or_update_user(message.from_user.id, data.get('phone'), data['name'], data['surname'],
                            data['category'], data.get('group'), social_contacts)
        await state.clear()
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. ‚è≥", reply_markup=types.ReplyKeyboardRemove())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {data.get('name', 'Unknown')}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

@dp.message(Command(commands=['help']))
async def help_handler(message: types.Message):
    await message.answer("–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                         "/profilReg - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
                         "/reg - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n"
                         "/profil - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
                         "/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                         "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã\n"
                         "/ask - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º ‚ùì\n"
                         "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /help")

@dp.message(Command(commands=['reg']))
async def reg_handler(message: types.Message):
    try:
        profile_status = get_profile_status_by_telegram_id(message.from_user.id)
        if not profile_status or profile_status != 'approved':
            await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –æ–¥–æ–±—Ä–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. ‚ö†Ô∏è")
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –∏–º–µ–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
            return
        events = get_active_events()
        if not events:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. üìÖ")
            logger.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            return
        keyboard = InlineKeyboardBuilder()
        for event in events:
            keyboard.button(text=f"{event[1]} {event[2]} - {event[4]} üìÜ", callback_data=f"reg_{event[0]}")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: üìã", reply_markup=keyboard.as_markup())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

@dp.callback_query(lambda c: c.data.startswith('reg_'))
async def process_register(callback_query: types.CallbackQuery):
    event_id = int(callback_query.data.split('_')[1])
    user_id = callback_query.from_user.id
    try:
        db_user_id = get_user_id_by_telegram_id(user_id)
        capacity = get_event_capacity(event_id)
        registered_count = get_event_reg_count(event_id)
        if registered_count >= capacity:
            await callback_query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ. ‚ùå")
            logger.warning(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id} –∑–∞–ø–æ–ª–Ω–µ–Ω–æ")
            return
        event_date = get_event_date(event_id)
        try:
            reminder_date = (datetime.strptime(event_date, '%Y-%m-%d') - timedelta(days=1)).strftime('%Y-%m-%d')
        except ValueError:
            await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. ‚ö†Ô∏è")
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {event_id}: {event_date}")
            return
        add_registration(db_user_id, event_id)
        add_reminder(db_user_id, event_id, reminder_date)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id}")
        await callback_query.answer("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! ‚úÖ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id}: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

@dp.message(Command(commands=['profil']))
async def profil_handler(message: types.Message, state: FSMContext):
    try:
        user = get_user_by_telegram_id(message.from_user.id)
        if not user:
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. ‚ö†Ô∏è")
            logger.warning(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        user_id = user[0]
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ donations
        count_gavrilov = get_donations_count_by_center(user_id, "–ì–∞–≤—Ä–∏–ª–æ–≤–∞")
        count_fmba = get_donations_count_by_center(user_id, "–§–ú–ë–ê")
        sum_donations = count_gavrilov + count_fmba
        last_donation = get_last_donation(user_id)
        last_date_center = f"{last_donation[0]} / {last_donation[1]}" if last_donation else "–ù–µ—Ç"
        history = get_donations_history(user_id)
        history_str = "\n".join([f"{d[0]} - {d[1]}" for d in history]) if history else "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏"
        dkm_str = "–î–∞" if user[6] else "–ù–µ—Ç"
        response = (
            f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: üìã\n–ò–º—è: {user[1]}\n–§–∞–º–∏–ª–∏—è: {user[2]}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user[3]}\n–ì—Ä—É–ø–ø–∞: {user[4]}\n"
            f"–°–æ—Ü—Å–µ—Ç–∏: {user[5] or '–ù–µ—Ç'} üîó\n–°—Ç–∞—Ç—É—Å: {user[7]} ‚öôÔ∏è\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–Ω–∞—Ü–∏–π: {sum_donations} üíâ\n–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–Ω–∞—Ü–∏—è: {last_date_center} üìÖ\n"
            f"–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –î–ö–ú: {dkm_str} ü¶¥\n–ò—Å—Ç–æ—Ä–∏—è –¥–æ–Ω–∞—Ü–∏–π:\n{history_str}")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–º–µ–Ω—ã
        registrations = get_user_registrations(user_id)
        if registrations:
            response += "\n\n–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: üìÖ"
            keyboard = InlineKeyboardBuilder()
            for reg in registrations:
                response += f"\n- {reg[1]} {reg[2]} - {reg[3]}"
                keyboard.button(text=f"–û—Ç–º–µ–Ω–∏—Ç—å {reg[1]} ‚ùå", callback_data=f"unreg_{reg[0]}")
            await message.answer(response, reply_markup=keyboard.as_markup())
        else:
            await message.answer(response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

@dp.callback_query(lambda c: c.data.startswith('unreg_'))
async def process_unreg(callback_query: types.CallbackQuery, state: FSMContext):
    event_id = int(callback_query.data.split('_')[1])
    user_id = callback_query.from_user.id
    try:
        db_user_id = get_user_id_by_telegram_id(user_id)
        cancel_registration(db_user_id, event_id)
        await state.set_state(CancelReasonState.reason)
        await state.update_data(reg_id=get_registration_id(db_user_id, event_id))  # –ü–æ–ª—É—á–∏—Ç—å reg_id
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ú–µ–¥–æ—Ç–≤–æ–¥ ‚öïÔ∏è")],
                      [KeyboardButton(text="–õ–∏—á–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã üë§")],
                      [KeyboardButton(text="–ù–µ –∑–∞—Ö–æ—Ç–µ–ª üòî")]],
            resize_keyboard=True
        )
        await callback_query.message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã:", reply_markup=keyboard)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id}, –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {event_id}: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

def get_registration_id(user_id, event_id):
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT id FROM registrations WHERE user_id = ? AND event_id = ?', (user_id, event_id))
        result = cursor.fetchone()
        return result[0] if result else None

@dp.message(CancelReasonState.reason)
async def process_cancel_reason(message: types.Message, state: FSMContext):
    reason = message.text
    data = await state.get_data()
    reg_id = data.get('reg_id')
    if reg_id:
        add_non_attendance_reason(reg_id, reason)
        await message.answer("–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ!", reply_markup=types.ReplyKeyboardRemove())
        logger.info(f"–ó–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è reg {reg_id}: {reason}")
    await state.clear()

@dp.message(Command(commands=['stats']))
async def stats_handler(message: types.Message):
    try:
        user_id = get_user_id_by_telegram_id(message.from_user.id)
        if user_id:
            reg_count = get_user_registrations_count(user_id)
            await message.answer(f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: üìä\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {reg_count} üìÖ")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {reg_count} —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π")
        else:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. ‚ö†Ô∏è")
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

@dp.message(Command(commands=['info']))
async def info_handler(message: types.Message):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–û –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ –∫—Ä–æ–≤–∏", callback_data="info_blood")
    keyboard.button(text="–û –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ –∫–æ—Å—Ç–Ω–æ–≥–æ –º–æ–∑–≥–∞", callback_data="info_bone")
    keyboard.button(text="–û –¥–æ–Ω–∞—Ü–∏—è—Ö –≤ –ú–ò–§–ò", callback_data="info_mifi")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: üìñ", reply_markup=keyboard.as_markup())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã")

@dp.callback_query(lambda c: c.data.startswith('info_'))
async def process_info(callback_query: types.CallbackQuery):
    section_map = {
        'blood': 'blood_donation.txt',
        'bone': 'bone_marrow_donation.txt',
        'mifi': 'mifi_donations.txt'
    }
    file_name = section_map.get(callback_query.data.split('_')[1])
    if not file_name:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª. ‚ö†Ô∏è")
        return
    try:
        with open(file_name, 'r', encoding='utf-8') as f:
            text = f.read()
        await callback_query.message.answer(text)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Ä–∞–∑–¥–µ–ª –∏–∑ {file_name}")
    except FileNotFoundError:
        await callback_query.message.answer("–¢–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. ‚ö†Ô∏è")
        logger.warning(f"–§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_name}: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")
    await callback_query.answer()

@dp.message(Command(commands=['ask']))
async def ask_handler(message: types.Message, state: FSMContext):
    profile_status = get_profile_status_by_telegram_id(message.from_user.id)
    if not profile_status or profile_status != 'approved':
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –æ–¥–æ–±—Ä–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. ‚ö†Ô∏è")
        return
    await state.set_state(AskQuestionState.text)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º:", reply_markup=keyboard)

@dp.message(AskQuestionState.text)
async def process_ask_text(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        return
    text = message.text.strip()
    if not text:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    try:
        user_id = get_user_id_by_telegram_id(message.from_user.id)
        question_id = add_question(user_id, text)
        await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º. –û–Ω–∏ –æ—Ç–≤–µ—Ç—è—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=types.ReplyKeyboardRemove())
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        admins = [123456789, 1653833795, 1191457973]
        for admin_id in admins:
            try:
                await bot.send_message(admin_id, f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}: {text}\n–û—Ç–≤–µ—Ç—å—Ç–µ —á–µ—Ä–µ–∑ /answer")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: {text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await state.clear()

# --- –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã ---

@dp.message(Command(commands=['answer']))
async def answer_handler(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        return
    try:
        questions = get_unanswered_questions()
        if not questions:
            await message.answer("–ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
            return
        keyboard = InlineKeyboardBuilder()
        for q in questions:
            user_tg_id = get_user_telegram_id(q[1])
            keyboard.button(text=f"–í–æ–ø—Ä–æ—Å {q[0]} –æ—Ç {user_tg_id}", callback_data=f"ans_{q[0]}")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞:", reply_markup=keyboard.as_markup())
        await state.set_state(AnswerQuestionState.select)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@dp.callback_query(lambda c: c.data.startswith('ans_'), AnswerQuestionState.select)
async def select_question(callback_query: types.CallbackQuery, state: FSMContext):
    question_id = int(callback_query.data.split('_')[1])
    await state.update_data(question_id=question_id)
    await state.set_state(AnswerQuestionState.response)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:", reply_markup=keyboard)
    await callback_query.answer()

@dp.message(AnswerQuestionState.response)
async def process_answer_text(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await state.set_state(AnswerQuestionState.select)
        await answer_handler(message, state)  # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
        return
    text = message.text.strip()
    if not text:
        await message.answer("–û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    data = await state.get_data()
    question_id = data.get('question_id')
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT user_id FROM questions WHERE id = ?', (question_id,))
            user_id = cursor.fetchone()[0]
        user_tg_id = get_user_telegram_id(user_id)
        if user_tg_id:
            await bot.send_message(user_tg_id, f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤: {text}")
            mark_question_answered(question_id)
            await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", reply_markup=types.ReplyKeyboardRemove())
            logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å {question_id}")
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å {question_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    await state.clear()

@dp.message(Command(commands=['broadcast']))
async def broadcast_handler(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        return
    await state.set_state(BroadcastState.text)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:", reply_markup=keyboard)

@dp.message(BroadcastState.text)
async def process_broadcast_text(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await state.clear()
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        return
    text = message.text.strip()
    if not text:
        await message.answer("–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(text=text)
    await state.set_state(BroadcastState.photo)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ë–µ–∑ —Ñ–æ—Ç–æ üìÑ")],
                  [KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ —Ñ–æ—Ç–æ':", reply_markup=keyboard)

@dp.message(BroadcastState.photo)
async def process_broadcast_photo(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await state.set_state(BroadcastState.text)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
            resize_keyboard=True
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=keyboard)
        return
    if message.text == "–ë–µ–∑ —Ñ–æ—Ç–æ üìÑ":
        photo = None
    elif message.photo:
        photo = message.photo[-1].file_id
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ë–µ–∑ —Ñ–æ—Ç–æ'.")
        return
    await state.update_data(photo=photo)
    await state.set_state(BroadcastState.confirm)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="broadcast_confirm")
    keyboard.button(text="–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="broadcast_cancel")
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=keyboard.as_markup())

@dp.callback_query(lambda c: c.data in ['broadcast_confirm', 'broadcast_cancel'], BroadcastState.confirm)
async def confirm_broadcast(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'broadcast_cancel':
        await state.clear()
        await callback_query.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await callback_query.answer()
        return
    data = await state.get_data()
    text = data.get('text')
    photo = data.get('photo')
    try:
        users = get_consented_users_telegram_ids()
        sent_count = 0
        for tg_id in users:
            try:
                if photo:
                    await bot.send_photo(tg_id, photo, caption=text)
                else:
                    await bot.send_message(tg_id, text)
                sent_count += 1
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")
        await callback_query.message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        logger.info(f"–ê–¥–º–∏–Ω {callback_query.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É: {text[:50]}...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ.")
    await state.clear()
    await callback_query.answer()

@dp.message(Command(commands=['admin_stats']))
async def admin_stats_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        return
    try:
        users_count, events_count, reg_count = get_admin_stats()
        await message.answer(
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: üìä\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count} üë•\n–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {events_count} üìÖ\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {reg_count} üìù")
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

@dp.message(Command(commands=['admin_reg']))
async def admin_reg_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∞–º–∏")
        return
    try:
        pending_users = get_pending_users()
        if not pending_users:
            await message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫. üì≠")
            logger.info("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
            return
        for user in pending_users:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–ü—Ä–∏–Ω—è—Ç—å ‚úÖ", callback_data=f"approve_{user[0]}")
            keyboard.button(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", callback_data=f"reject_{user[0]}")
            await message.answer(
                f"–ó–∞—è–≤–∫–∞: {user[1]} {user[2]}\n–ì—Ä—É–ø–ø–∞: {user[3]}\n–°–æ—Ü—Å–µ—Ç–∏: {user[4]}",
                reply_markup=keyboard.as_markup())
            logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user[1]} {user[2]} –¥–ª—è –∞–¥–º–∏–Ω–∞ {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

@dp.callback_query(lambda c: c.data.startswith('approve_') or c.data.startswith('reject_'))
async def process_profile_action(callback_query: types.CallbackQuery):
    action, user_id_str = callback_query.data.split('_')
    user_id = int(user_id_str)
    try:
        status = 'approved' if action == 'approve' else 'rejected'
        update_profile_status(user_id, status)
        telegram_id = get_telegram_id_by_user_id(user_id)
        if action == 'approve' and telegram_id is not None:  # –§–∏–∫—Å –±–∞–≥–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            await bot.send_message(telegram_id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª –ø—Ä–∏–Ω—è—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. ‚úÖ")
            # –û—Ç–ø—Ä–∞–≤–∫–∞ /help –ø–æ—Å–ª–µ approve
            help_text = ("–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: üìã\n"
                         "/profilReg - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ‚úçÔ∏è\n"
                         "/reg - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ üìÖ\n"
                         "/profil - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üë§\n"
                         "/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä\n"
                         "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã üìñ\n"
                         "/ask - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º ‚ùì\n"
                         "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ ‚ùì")
            await bot.send_message(telegram_id, help_text)
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} {status} –∞–¥–º–∏–Ω–æ–º {callback_query.from_user.id}")
        await callback_query.answer(f"–ü—Ä–æ—Ñ–∏–ª—å {'–ø—Ä–∏–Ω—è—Ç ‚úÖ' if action == 'approve' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω ‚ùå'}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ—Ñ–∏–ª—è ID {user_id}: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

@dp.message(Command(commands=['admin_help']))
async def admin_help_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫—É—é –ø–æ–º–æ—â—å")
        return
    await message.answer("/admin_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞\n"
                         "/admin_reg - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏\n"
                         "/add_event - –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n"
                         "/stats_event - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
                         "/see_profile - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π\n"
                         "/see_profile (—á–∏—Å–ª–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç) - –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∞–π–¥–∏\n"
                         "/import_excel - –ò–º–ø–æ—Ä—Ç –∏–∑ Excel\n"
                         "/upload_stats - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Excel\n"
                         "/export_stats - –í—ã–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ Excel\n"
                         "/answer - –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                         "/broadcast - –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                         "/help - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥")
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥")

@dp.message(Command(commands=['add_event']))
async def add_event_handler(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
        return
    await state.set_state(AddEventStates.date)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (YYYY-MM-DD): üìÖ", reply_markup=keyboard)
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")

@dp.message(AddEventStates.date)
async def process_event_date(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        return
    try:
        event_date = datetime.strptime(message.text, '%Y-%m-%d')
        if event_date < datetime.now().replace(hour=0, minute=0, second=0, microsecond=0):
            await message.answer("–î–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞. –í–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD. ‚ö†Ô∏è")
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å –ø—Ä–æ—à–µ–¥—à–µ–π –¥–∞—Ç–æ–π {message.text} –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}")
            return
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD. ‚ö†Ô∏è")
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}: {message.text}")
        return
    await state.update_data(date=message.text)
    await state.set_state(AddEventStates.time)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (HH:MM): ‚è∞", reply_markup=keyboard)

@dp.message(AddEventStates.time)
async def process_event_time(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await state.set_state(AddEventStates.date)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
            resize_keyboard=True
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (YYYY-MM-DD): üìÖ", reply_markup=keyboard)
        return
    await state.update_data(time=message.text)
    await state.set_state(AddEventStates.location)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ: üìç", reply_markup=keyboard)

@dp.message(AddEventStates.location)
async def process_event_location(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await state.set_state(AddEventStates.time)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
            resize_keyboard=True
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (HH:MM): ‚è∞", reply_markup=keyboard)
        return
    await state.update_data(location=message.text)
    await state.set_state(AddEventStates.description)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ: üìù", reply_markup=keyboard)

@dp.message(AddEventStates.description)
async def process_event_description(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await state.set_state(AddEventStates.location)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
            resize_keyboard=True
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ: üìç", reply_markup=keyboard)
        return
    await state.update_data(description=message.text)
    await state.set_state(AddEventStates.capacity)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: üë•", reply_markup=keyboard)

@dp.message(AddEventStates.capacity)
async def process_event_capacity(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await state.set_state(AddEventStates.description)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
            resize_keyboard=True
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ: üìù", reply_markup=keyboard)
        return
    try:
        capacity = int(message.text)
        if capacity <= 0:
            raise ValueError("–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
    except ValueError:
        await message.answer("–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0. ‚ö†Ô∏è")
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}: {message.text}")
        return
    data = await state.get_data()
    try:
        add_event(data['date'], data['time'], data['location'], data['description'], capacity)
        await state.clear()
        await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. ‚úÖ", reply_markup=types.ReplyKeyboardRemove())
        # –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º consented –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        asyncio.create_task(send_new_event_notification(data['date'], data['time'], data['location'], data['description']))
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –¥–æ–±–∞–≤–∏–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {data['description']}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

async def send_new_event_notification(date, time, location, description):
    try:
        users = get_consented_users_telegram_ids()
        for telegram_id in users:
            try:
                await bot.send_message(telegram_id, f"–ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {description} üìÖ\n–î–∞—Ç–∞: {date} {time} ‚è∞\n–ú–µ—Å—Ç–æ: {location} üìç\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /reg! ‚úÖ")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")
        logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –æ –Ω–æ–≤–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

@dp.message(Command(commands=['stats_event']))
async def stats_event_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
        return
    try:
        events = get_all_events()
        for event in events:
            reg_count = get_registrations_count(event[0])
            donors_count = get_attended_count(event[0])
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–ó–∞–º–æ—Ä–æ–∑–∏—Ç—å ‚ùÑÔ∏è" if event[5] == 'active' else "–†–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å üî•",
                            callback_data=f"toggle_{event[0]}")
            await message.answer(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event[1]} {event[2]} - {event[3]} üìÖ\n"
                                 f"–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {event[4]} üë•\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {reg_count} üìù\n–î–æ–Ω–æ—Ä–æ–≤: {donors_count} üíâ\n–°—Ç–∞—Ç—É—Å: {event[5]} ‚öôÔ∏è",
                                 reply_markup=keyboard.as_markup())
            logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ID {event[0]}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

@dp.callback_query(lambda c: c.data.startswith('toggle_'))
async def toggle_event(callback_query: types.CallbackQuery):
    event_id = int(callback_query.data.split('_')[1])
    try:
        current_status = get_event_status(event_id)
        new_status = 'frozen' if current_status == 'active' else 'active'
        update_event_status(event_id, new_status)
        logger.info(f"–ê–¥–º–∏–Ω {callback_query.from_user.id} –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {event_id} –Ω–∞ {new_status}")
        await callback_query.answer(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {'–∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ ‚ùÑÔ∏è' if new_status == 'frozen' else '—Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω–æ üî•'}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {event_id}: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

@dp.message(Command(commands=['see_profile']))
async def see_profile_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç (–ø–æ–∏—Å–∫ –ø–æ ID)
    args = message.text.split()
    if len(args) > 1:
        try:
            search_id = int(args[1])
            await show_user_detail_by_id(message, search_id)
            return
        except ValueError:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç /see_profile <—á–∏—Å–ª–æ>. ‚ö†Ô∏è")
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤ –ø–æ–∏—Å–∫–µ –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}: {args[1]}")
            return
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    await show_profiles(message, offset=0)

async def show_user_detail_by_id(message: types.Message, user_id: int):
    try:
        user = get_user_by_id(user_id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. ‚ö†Ô∏è")
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∞ {message.from_user.id}")
            return
        response = (f"–ü–æ–ª–Ω–∞—è –∞–Ω–∫–µ—Ç–∞: üìã\n"
                    f"ID: {user[0]}\n"
                    f"Telegram ID: {user[1]}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {user[2]} üìû\n"
                    f"–ò–º—è: {user[3]}\n"
                    f"–§–∞–º–∏–ª–∏—è: {user[4]}\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user[5]}\n"
                    f"–ì—Ä—É–ø–ø–∞: {user[6]} üìö\n"
                    f"–°–æ—Ü—Å–µ—Ç–∏: {user[7]} üîó\n"
                    f"DKM: {'–î–∞' if user[8] else '–ù–µ—Ç'} ü¶¥\n"
                    f"–°—Ç–∞—Ç—É—Å: {user[10]} ‚öôÔ∏è")
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–ö–∏–∫–Ω—É—Ç—å ‚ùå", callback_data=f"kick_{user_id}")
        await message.answer(response, reply_markup=keyboard.as_markup())
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ ID {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ—Ñ–∏–ª—è ID {user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

async def show_profiles(message: types.Message, offset: int):
    try:
        users = get_users_paginated(5, offset)
        if not users:
            await message.answer("–ü—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. üì≠")
            logger.info("–ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        # –ü–∞–≥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        pagination_keyboard = InlineKeyboardBuilder()
        if offset > 0:
            pagination_keyboard.button(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data=f"prev_{offset - 5}")
        if len(users) == 5:
            pagination_keyboard.button(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"next_{offset + 5}")
        pagination_markup = pagination_keyboard.as_markup() if pagination_keyboard.inline_keyboard else None
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Ç–µ–∫—Å—Ç + –∫–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
        for user in users:
            reg_count = get_user_registrations_count(user[0])
            text = f"{user[2]} {user[1]}, –ì—Ä—É–ø–ø–∞: {user[3]}, (ID: {user[0]}), –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {reg_count} üìù"
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ üîç", callback_data=f"detail_{user[0]}")
            await message.answer(text, reply_markup=keyboard.as_markup())
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if pagination_markup:
            await message.answer("–ù–∞–≤–∏–≥–∞—Ü–∏—è: ‚ÜîÔ∏è", reply_markup=pagination_markup)
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π, offset: {offset}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

@dp.callback_query(lambda c: c.data.startswith('detail_'))
async def show_user_detail(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[1])
    try:
        user = get_user_by_id(user_id)
        if not user:
            await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. ‚ö†Ô∏è")
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        response = (f"–ü–æ–ª–Ω–∞—è –∞–Ω–∫–µ—Ç–∞: üìã\n"
                    f"ID: {user[0]}\n"
                    f"Telegram ID: {user[1]}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {user[2]} üìû\n"
                    f"–ò–º—è: {user[3]}\n"
                    f"–§–∞–º–∏–ª–∏—è: {user[4]}\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user[5]}\n"
                    f"–ì—Ä—É–ø–ø–∞: {user[6]} üìö\n"
                    f"–°–æ—Ü—Å–µ—Ç–∏: {user[7]} üîó\n"
                    f"DKM: {'–î–∞' if user[8] else '–ù–µ—Ç'} ü¶¥\n"
                    f"–°—Ç–∞—Ç—É—Å: {user[10]} ‚öôÔ∏è")
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–ö–∏–∫–Ω—É—Ç—å ‚ùå", callback_data=f"kick_{user_id}")
        await callback_query.message.answer(response, reply_markup=keyboard.as_markup())
        logger.info(f"–ê–¥–º–∏–Ω {callback_query.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ—Ñ–∏–ª—è ID {user_id}: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

@dp.callback_query(lambda c: c.data.startswith('kick_'))
async def kick_user(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[1])
    try:
        telegram_id = get_telegram_id_by_user_id(user_id)
        delete_user_by_id(user_id)
        if telegram_id is not None:  # –§–∏–∫—Å: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
            await bot.send_message(telegram_id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. ‚ùå")
        logger.info(f"–ê–¥–º–∏–Ω {callback_query.from_user.id} —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω. ‚úÖ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

@dp.callback_query(lambda c: c.data.startswith('next_') or c.data.startswith('prev_'))
async def process_pagination(callback_query: types.CallbackQuery):
    action, offset = callback_query.data.split('_')
    offset = int(offset)
    await show_profiles(callback_query.message, offset)
    await callback_query.answer()
    logger.info(f"–ê–¥–º–∏–Ω {callback_query.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª–µ–π, offset: {offset}")

@dp.message(Command(commands=['import_excel']))
async def import_excel_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏–º–ø–æ—Ä—Ç Excel")
        return
    try:
        import_from_excel()
        await message.answer("–î–∞–Ω–Ω—ã–µ –∏–∑ Excel —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã. ‚úÖ")
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤—ã–ø–æ–ª–Ω–∏–ª –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)} ‚ö†Ô∏è")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ Excel –∞–¥–º–∏–Ω–æ–º {message.from_user.id}: {e}")

@dp.message(Command(commands=['upload_stats']))
async def upload_stats_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        return
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π (–§–ò–û, –¥–∞—Ç–∞, –¶–ö). üìÇ")

@dp.message(lambda message: message.document and message.document.file_name.endswith('.xlsx'))
async def process_upload_stats(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        return
    try:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        await bot.download_file(file_path, "temp_stats.xlsx")
        wb = openpyxl.load_workbook('temp_stats.xlsx')
        sheet = wb.active
        for row in sheet.iter_rows(min_row=2, values_only=True):
            fio = str(row[0]).strip()
            parts = fio.split(maxsplit=1)
            surname = parts[0]
            name = parts[1] if len(parts) > 1 else ''
            date = str(row[5]) if row[5] else None  # –ü—Ä–∏–º–µ—Ä: –¥–∞—Ç–∞ –ì–∞–≤—Ä–∏–ª–æ–≤–∞ –∏–ª–∏ –§–ú–ë–ê
            center = '–ì–∞–≤—Ä–∏–ª–æ–≤–∞' if row[2] else '–§–ú–ë–ê' if row[3] else None
            if not center or not date:
                continue
            user = get_user_by_name_surname(name, surname)
            if user:
                user_id = user[0]
                add_donation(user_id, date, center)
                # –ï—Å–ª–∏ DKM (–¥–æ–ø—É—Å—Ç–∏–º, –¥–æ–±–∞–≤–∏–º –∫–æ–ª–æ–Ω–∫—É 9 –∫–∞–∫ DKM)
                if len(row) > 9 and row[9]:
                    update_dkm(user_id, 1)
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞. ‚úÖ")
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–≥—Ä—É–∑–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Excel")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {str(e)} ‚ö†Ô∏è")
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ stats Excel: {e}")

@dp.message(Command(commands=['export_stats']))
async def export_stats_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤. ‚ö†Ô∏è")
        return
    try:
        wb = openpyxl.Workbook()
        sheet = wb.active
        sheet.append(['ID', '–§–ò–û', '–ì—Ä—É–ø–ø–∞', '–ö–æ–ª-–≤–æ –ì–∞–≤—Ä–∏–ª–æ–≤–∞', '–ö–æ–ª-–≤–æ –§–ú–ë–ê', '–°—É–º–º–∞', '–ü–æ—Å–ª–µ–¥–Ω—è—è –ì–∞–≤—Ä–∏–ª–æ–≤–∞', '–ü–æ—Å–ª–µ–¥–Ω—è—è –§–ú–ë–ê', '–¢–µ–ª–µ—Ñ–æ–Ω'])
        users = get_all_users_for_export()
        for user in users:
            user_id = user[0]
            fio = f"{user[4]} {user[3]}"
            group = user[6]
            phone = user[2]
            count_g = get_donations_count_by_center(user_id, "–ì–∞–≤—Ä–∏–ª–æ–≤–∞")
            count_f = get_donations_count_by_center(user_id, "–§–ú–ë–ê")
            sum_d = count_g + count_f
            last_g = get_last_donation(user_id)[0] if get_last_donation(user_id) and get_last_donation(user_id)[1] == "–ì–∞–≤—Ä–∏–ª–æ–≤–∞" else ''
            last_f = get_last_donation(user_id)[0] if get_last_donation(user_id) and get_last_donation(user_id)[1] == "–§–ú–ë–ê" else ''
            sheet.append([user_id, fio, group, count_g, count_f, sum_d, last_g, last_f, phone])
        wb.save('export_stats.xlsx')
        await bot.send_document(message.chat.id, types.FSInputFile('export_stats.xlsx'))
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤—ã–≥—Ä—É–∑–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ: {str(e)} ‚ö†Ô∏è")
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ stats: {e}")

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –æ–ø—Ä–æ—Å—ã ---

async def check_reminders():
    try:
        current_date = datetime.now().strftime('%Y-%m-%d')
        reminders = get_reminders_to_send(current_date)
        for reminder in reminders:
            user_id = reminder[1]
            event_id = reminder[2]
            event = get_event_by_id(event_id)
            if event:
                await bot.send_message(user_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {event[0]} {event[1]} –≤ {event[2]} —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è! ‚è∞")
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {event_id}")
            delete_reminder(reminder[0])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

async def check_non_attendance():
    try:
        today = datetime.now().strftime('%Y-%m-%d')
        past_events = get_past_events(today)
        for event in past_events:
            event_id = event[0]
            non_attended = get_non_attended_registrations(event_id)
            for reg in non_attended:
                reg_id = reg[0]
                user_id = reg[1]
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text="–ú–µ–¥–æ—Ç–≤–æ–¥ ‚öïÔ∏è", callback_data=f"reason_med_{reg_id}")
                keyboard.button(text="–õ–∏—á–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã üë§", callback_data=f"reason_personal_{reg_id}")
                keyboard.button(text="–ù–µ –∑–∞—Ö–æ—Ç–µ–ª üòî", callback_data=f"reason_no_{reg_id}")
                await bot.send_message(user_id, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –Ω–æ –Ω–µ –ø—Ä–∏—à–ª–∏. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É: ‚ùì", reply_markup=keyboard.as_markup())
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø—Ä–æ—Å –Ω–µ—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è reg {reg_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ—è–≤–æ–∫: {e}")

@dp.callback_query(lambda c: c.data.startswith('reason_'))
async def process_non_attendance_reason(callback_query: types.CallbackQuery):
    parts = callback_query.data.split('_')
    reason_type = parts[1]
    reg_id = int(parts[2])
    reason_map = {'med': '–º–µ–¥–æ—Ç–≤–æ–¥', 'personal': '–ª–∏—á–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã', 'no': '–Ω–µ –∑–∞—Ö–æ—Ç–µ–ª'}
    reason = reason_map.get(reason_type)
    if not reason:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞. ‚ö†Ô∏è")
        return
    try:
        add_non_attendance_reason(reg_id, reason)
        await callback_query.answer("–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–ø–∏—Å–∞–Ω–∞. ‚úÖ")
        logger.info(f"–ó–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ—è–≤–∫–∏ –¥–ª—è reg {reg_id}: {reason}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏—á–∏–Ω—ã –Ω–µ—è–≤–∫–∏ –¥–ª—è reg {reg_id}: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è")

async def schedule_checker():
    while True:
        schedule.run_pending()
        await asyncio.sleep(1)

async def on_startup(_):
    asyncio.create_task(schedule_checker())
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

async def main():
    try:
        init_db()
        import_from_excel()
        schedule.every(10).minutes.do(lambda: asyncio.create_task(check_reminders()))  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 10 –º–∏–Ω
        schedule.every().day.at("00:00").do(lambda: asyncio.create_task(check_non_attendance()))  # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–ø—Ä–æ—Å
        await dp.start_polling(bot, skip_updates=True, on_startup=on_startup)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == '__main__':
    asyncio.run(main())